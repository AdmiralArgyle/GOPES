esphome:
  name: dungeon-air-quality
  friendly_name: Dungeon Air Quality

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: latest

# Enable logging
logger:
#  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "ojKg/+qdPc6f1vW4F60gkMzPCAHya0AKJUFvJdZeo0k="

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dungeon-Air-Quality"
    password: !secret fallback_ap_password

web_server:
  port: 80

captive_portal:

# I²C bus (for BME680 and SCD41)
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 400kHz  # Optimal frequency for BME680

# UART bus (for PMS5003)
uart:
  rx_pin: GPIO16   # Connect PMS5003 TX to ESP32 RX
  tx_pin: GPIO17   # (TX not used by PMS5003)
  baud_rate: 9600

################################################################################
# Number Components for Adjustable Offsets (replacing globals)
################################################################################
number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    unit_of_measurement: "ºC"
    min_value: -50.0
    max_value: 0.0
    step: 0.1
    mode: box
    optimistic: true
    restore_value: true
    initial_value: 0.0
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    unit_of_measurement: "%"
    min_value: 0.0
    max_value: 50.0
    step: 0.1
    mode: box
    optimistic: true
    restore_value: true
    initial_value: 0.0

################################################################################
# PMS5003 Particulate Measurements via PMSX003 Library
# BME680 configuration using BSEC2
# Ensure that the sensor is properly wired and powered (3.3V)
################################################################################

bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x77  # Verify this address with your hardware (common alternatives: 0x76)
  state_save_interval: 6h


sensor:
  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "PM1.0 Concentration"
      unit_of_measurement: "µg/m³"
    pm_2_5:
      name: "PM2.5 Concentration"
      unit_of_measurement: "µg/m³"
    pm_10_0:
      name: "PM10 Concentration"
      unit_of_measurement: "µg/m³"

  # BME680 Readings Using BSEC2 (with offset adjustments)
  - platform: bme68x_bsec2
    temperature:
      name: "BME680 Temperature"
      unit_of_measurement: "°C"
      id: batt_box_temperature
      filters:
        - lambda: |-
            // Apply the adjustable temperature offset
            return x + id(temperature_offset).state;
    pressure:
      name: "BME680 Pressure"
      unit_of_measurement: "hPa"
      id: batt_box_pressure
      filters:
        - median
    humidity:
      name: "BME680 Humidity"
      unit_of_measurement: "%"
      id: batt_box_humidity
      filters:
        - lambda: |-
            // Apply the adjustable humidity offset
            return x + id(humidity_offset).state;
    iaq:
      name: "BME680 IAQ"
      id: bme680_iaq
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
      unit_of_measurement: "ppm"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"
      unit_of_measurement: "ppm"

  # SCD41 Sensor Readings
  - platform: scd4x
    co2:
      name: "SCD41 CO2"
      unit_of_measurement: "ppm"
    temperature:
      name: "SCD41 Temperature"
      unit_of_measurement: "°C"
    humidity:
      name: "SCD41 Humidity"
      unit_of_measurement: "%"

  # Derived Sensor: Dew Point (using the Magnus formula)
  - platform: template
    name: "Dew Point"
    unit_of_measurement: "°C"
    id: dew_point
    lambda: |-
      float T = id(batt_box_temperature).state;
      float RH = id(batt_box_humidity).state;
      if (isnan(T) || isnan(RH))
        return NAN;
      const float a = 17.27;
      const float b = 237.7;
      float alpha = log(RH / 100.0) + (a * T) / (b + T);
      return (b * alpha) / (a - alpha);
    update_interval: 60s

  # Derived Sensor: Altitude (assuming sea-level pressure = 1013.25 hPa)
  - platform: template
    name: "Altitude"
    unit_of_measurement: "m"
    id: altitude
    lambda: |-
      float p = id(batt_box_pressure).state;
      if (isnan(p))
        return NAN;
      return 44330.0 * (1 - pow(p / 1013.25, 1.0 / 5.255));
    update_interval: 60s

  # Standard Diagnostic Sensors
  - platform: uptime
    name: "Device Uptime"
    update_interval: 60s
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s

################################################################################
# Text Sensors for Diagnostics and Derived Information
################################################################################
text_sensor:
  # IAQ Classification based on the IAQ index
  - platform: template
    name: "IAQ Classification"
    lambda: |-
      int iaq = int(id(bme680_iaq).state);
      if (iaq <= 50)
        return {"Excellent"};
      else if (iaq <= 100)
        return {"Good"};
      else if (iaq <= 150)
        return {"Lightly Polluted"};
      else if (iaq <= 200)
        return {"Moderately Polluted"};
      else if (iaq <= 250)
        return {"Heavily Polluted"};
      else if (iaq <= 350)
        return {"Severely Polluted"};
      else
        return {"Extremely Polluted"};
  # Device IP Address
  - platform: wifi_info
    ip_address:
      name: "Device IP Address"
  # Firmware Version (optional)
  - platform: version
    name: "Firmware Version"

################################################################################
# Binary Sensor for Overall Sensor Health
################################################################################
binary_sensor:
  - platform: template
    name: "Air Quality Sensor Healthy"
    lambda: |-
      if (!isnan(id(batt_box_temperature).state) &&
          !isnan(id(batt_box_humidity).state) &&
          !isnan(id(batt_box_pressure).state))
        return true;
      return false;
    device_class: connectivity

################################################################################
# Button Component to Restart the Device
################################################################################
button:
  - platform: restart
    icon: mdi:power-cycle
    name: "Reboot Sensor"
