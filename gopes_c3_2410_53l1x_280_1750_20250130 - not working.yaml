# GOPES (GUPPI Occupancy and Presence Enhancement System)
# Using uncle-yura/esphome-ld2450 and Roode VL53L1X

substitutions:
  name: gopes-occupancy
  friendly_name: "GOPES Occupancy"

# Basic ESP32 configuration
#esp32:
#  board: esp32dev
#  framework:
#    type: arduino

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino
    version: latest

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

esphome:
  name: gopes-test-01
  friendly_name: GOPES Test 01
  platformio_options:
   board_build.flash_mode: dio
   platform_version: latest

# Enable Home Assistant API
api:
  encryption:
    key: "Fg6xZOM8Lgc2SjgvqBF6mi88ZnrhXG9HAlExLlLRhpk="
#  services:
#    - service: recalibrate
#      then:
#        - lambda: "id(roode_platform)->recalibration();"
#    - service: set_max_threshold
#      variables:
#       newThreshold: int
#      then:
#        - lambda: "id(roode_platform)->set_max_threshold_percentage(newThreshold);id(roode_platform)->recalibration();"
#   - service: set_min_threshold
#      variables:
#        newThreshold: int
#     then:
#       - lambda: "id(roode_platform)->set_min_threshold_percentage(newThreshold);id(roode_platform)->recalibration();"


ota:
  - platform: esphome
#    password: "11d507feab2cc9d9977934fd17fbe6bf"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable AP mode for setup
  ap:
    ssid: "GOPES-Setup-${name}"
    password: !secret fallback_ap_password

captive_portal:

# WiFi configuration
#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password
  
# Enable Home Assistant API
#api:
#  password: !secret api_password

# Enable MQTT
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "GUPPI/GOPES/${name}"
  discovery_retain: true
  discovery_prefix: homeassistant

# Load external components
external_components:
  refresh: always
  source:
    type: git
    url: https://github.com/Lyr3x/Roode
    ref: master

#  - source:
#      type: git
#      url: https://github.com/uncle-yura/esphome-ld2450
#      ref: master
#    components: [ ld2450 ]
#  - source: github://Lyr3x/Roode@master
#    refresh: always
#vl53l1x:
#roode:
#  - source: 
#      type: git
#      url: github://Lyr3x/Roode
##        refresh: always
#      ref: master

# Configure I2C for sensors
i2c:
  sda: GPIO6
  scl: GPIO7
  scan: true
  id: bus_a
  frequency: 400khz

# Configure UART for LD2450
uart:
#  tx_pin: GPIO17
#  rx_pin: GPIO16
#  baud_rate: 256000
  id: uart_radar
#  id: uart_radar
#  id: ld2410_uart
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

# BME68x configuration using BSEC2
bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x76
  state_save_interval: 6h

# LD2410 mmWave Radar Configuration
ld2410:
#ld2450:
#  uart_id: uart_radar

#vl53l1x:
#  # A non-standard I2C address
##  address:
#  address: 0x29
##  sample_rate: LP
##  supply_voltage: 3.3V
##  state_save_interval: 6h

#  # Sensor calibration options
#  calibration:
#    # The ranging mode is different based on how long the distance is that the sensor need to measure.
#    # The longer the distance, the more time the sensor needs to take a measurement.
#    # Available options are: auto, shortest, short, medium, long, longer, longest
#    ranging: auto
#    # The offset correction distance. See calibration section (WIP) for more details.
#    #offset: 8mm
#    # The corrected photon count in counts per second. See calibration section (WIP) for more details.
#    #crosstalk: 53406cps

#roode:
#  id: roode_platform
  # Smooth out measurements by using the minimum distance from this number of readings
#  sampling: 2
  # This controls the size of the Region of Interest the sensor should take readings in.
#  roi: { height: 16, width: 6 }
  # The detection thresholds for determining whether a measurement should count as a person crossing.
  # A reading must be greater than the minimum and less than the maximum to count as a crossing.
  # These can be given as absolute distances or as percentages.
  # Percentages are based on the automatically determined idle or resting distance.
#  detection_thresholds: # defaults for both zones. These also default to 0% & 85% as previously done.
    # min: 234mm # absolute distance
#    max: 85% # percent based on idle distance
  # The people counting algorithm works by splitting the sensor's capability reading area into two zones.
  # This allows for detecting whether a crossing is an entry or exit based on which zones was crossed first.
#  zones:
#    invert: true



  # Hardware pins
  #pins:
    # Shutdown/Enable pin, which is needed to change the I2C address. Required with multiple sensors.
  #  xshut: GPIO3
    # Interrupt pin. Use to notify us when a measurement is ready. This feature is WIP.
    # This needs to be an internal pin.
  #  interrupt: GPIO1


# Template sensors for radar data
sensor:
  - platform: ld2410
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance

  - platform: ld2410
    moving_distance:
      name: Radar Moving Distance
      id: moving_distance
    still_distance:
      name: Radar Still Distance
      id: still_distance
    moving_energy:
      name: Radar Move Energy
      id: radar_moving_energy
    still_energy:
      name: Radar Still Energy
      id: radar_still_energy
    detection_distance:
      name: Radar Detection Distance
      id: radar_detection_distance
    g0:
      move_energy:
        name: g0 move energy
        state_class: measurement
      still_energy:
        name: g0 still energy
        state_class: measurement
    g1:
      move_energy:
        name: g1 move energy
        state_class: measurement
      still_energy:
        name: g1 still energy
        state_class: measurement
    g2:
      move_energy:
        name: g2 move energy
        state_class: measurement
      still_energy:
        name: g2 still energy
        state_class: measurement
    g3:
      move_energy:
        name: g3 move energy
        state_class: measurement
      still_energy:
        name: g3 still energy
        state_class: measurement
    g4:
      move_energy:
        name: g4 move energy
        state_class: measurement
      still_energy:
        name: g4 still energy
        state_class: measurement
    g5:
      move_energy:
        name: g5 move energy
        state_class: measurement
      still_energy:
        name: g5 still energy
        state_class: measurement
    g6:
      move_energy:
        name: g6 move energy
        state_class: measurement
      still_energy:
        name: g6 still energy
        state_class: measurement
    g7:
      move_energy:
        name: g7 move energy
        state_class: measurement
      still_energy:
        name: g7 still energy
        state_class: measurement
    g8:
      move_energy:
        name: g8 move energy
        state_class: measurement
      still_energy:
        name: g8 still energy
        state_class: measurement

  - platform: internal_temperature
    name: ESP Temperature
    unit_of_measurement: °C
    device_class: TEMPERATURE
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 10s

  - platform: wifi_signal 
    name: WiFi RSSI
    id: wifi_signal_db
    update_interval: 30s
    entity_category: "diagnostic"

  # BME68x Sensors using BSEC2
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    temperature:
      name: "Temperature"
      id: raw_temperature
      internal: true
    pressure:
      name: "Pressure"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    humidity:
      name: "Humidity"
      id: raw_humidity
      internal: true
    gas_resistance:
      name: "Gas Resistance"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    iaq:
      name: "IAQ"
      id: iaq
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    co2_equivalent:
      name: "CO2 Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3

  # Compensated temperature sensor
  - platform: template
    name: "Temperature Compensated"
    id: compensated_temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_temperature).state + id(temperature_offset).state;
    update_interval: 60s

  # Compensated humidity sensor
  - platform: template
    name: "Humidity Compensated"
    id: compensated_humidity
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_humidity).state + id(humidity_offset).state;
    update_interval: 60s

#  - platform: roode
#    id: roode_sensors
#    distance_entry:
#      name: $friendly_name distance zone 0
#      filters:
#        - delta: 100
#    distance_exit:
#     name: $friendly_name distance zone 1
#     filters:
#        - delta: 100
#    max_threshold_entry:
#      name: $friendly_name max zone 0
#    max_threshold_exit:
#      name: $friendly_name max zone 1
#    min_threshold_entry:
#      name: $friendly_name min zone 0
#    min_threshold_exit:
#      name: $friendly_name min zone 1
#    roi_height_entry:
#      name: $friendly_name ROI height zone 0
#    roi_width_entry:
#      name: $friendly_name ROI width zone 0
#    roi_height_exit:
#      name: $friendly_name ROI height zone 1
#    roi_width_exit:
#      name: $friendly_name ROI width zone 1
#    sensor_status:
#      name: Sensor Status

#  Normal uptime sensor
  - platform: uptime
    id: uptime_sensor
    internal: true
    update_interval: 60s

#  Roode uptime sensor
#  - platform: uptime
#    name: Uptime Sensor
#    id: uptime_sensor
#    update_interval: 60s
#    internal: true
#    on_raw_value:
#      then:
#        - text_sensor.template.publish:
#            id: uptime_human
#            state: !lambda |-
#              int seconds = round(id(uptime_sensor).raw_state);
#              int days = seconds / (24 * 3600);
#              seconds = seconds % (24 * 3600);
#              int hours = seconds / 3600;
#              seconds = seconds % 3600;
#              int minutes = seconds /  60;
#              seconds = seconds % 60;
#              return (
#                (days ? String(days) + "d " : "") +
#                (hours ? String(hours) + "h " : "") +
#                (minutes ? String(minutes) + "m " : "") +
#                (String(seconds) + "s")
#              ).c_str();

  - platform: bh1750
    name: "BH1750 Illuminance"
    address: 0x23
    update_interval: 60s

switch:
  - platform: ld2410
    engineering_mode:
      name: "LD2410 Engineering Mode"
    bluetooth:
      name: "LD2410 Bluetooth"

number:
  - platform: ld2410
    timeout:
      name: Radar Timeout
    max_move_distance_gate:
      name: Radar Max Move Distance
    max_still_distance_gate:
      name: Radar Max Still Distance
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

# Setting start of zone 1 occupancy
  - platform: template
    name: "Radar Zone 1 Start"
    id: radar_z1_start
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 1 occupancy
  - platform: template
    name: "Radar End Zone 1"
    id: radar_z1_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 50
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 2 occupancy
  - platform: template
    name: "Radar End Zone 2"
    id: radar_z2_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 150
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 3 occupancy
  - platform: template
    name: "Radar End Zone 3"
    id: radar_z3_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 250
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

#  - platform: roode
#    people_counter:
#      name: $friendly_name people counter

  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    optimistic: true
    min_value: -10
    max_value: 10
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"
    
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    optimistic: true
    min_value: -20
    max_value: 20
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"


button:
  - platform: ld2410
    factory_reset:
      name: "LD2410 Factory Reset"
    restart:
      name: "LD2410 Reboot"
    query_params:
      name: "LD2410 Query Params"
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

#  - platform: restart
#    name: $friendly_name Restart
#    entity_category: config
#  - platform: template
#    name: $friendly_name Recalibrate
#    on_press:
#      - lambda: id(roode_platform)->recalibration();
#    entity_category: config


binary_sensor:
#  - platform: status
#    name: $friendly_name API Status
#  - platform: roode
#    presence_sensor:
#      name: $friendly_name presence

  - platform: ld2410
    has_target:
      name: Radar Target
      id: radar_has_target
    has_moving_target:
      name: Radar Moving Target
      id: radar_has_moving_target
    has_still_target:
      name: Radar Still Target
      id: radar_has_still_target
  ## Set Up Radar Zones Based On Distance
  - platform: template
    name: "Radar Zone 1 Occupancy"
    id: radar_zone_1_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_detection_distance).state < id(radar_z1_end).state) && (id(radar_detection_distance).state > id(radar_z1_start).state))){
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 2 Occupancy"
    id: radar_zone_2_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z1_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z2_end).state))) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 3 Occupancy"
    id: radar_zone_3_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z2_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z3_end).state))) {
        return true;
      } else {
        return false;
      }


text_sensor:
  - platform: ld2410
    version:
      name: "LD2410 Firmware Version"
    mac_address:
      name: "LD2410 MAC Address"

  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    name: "IAQ Classification"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

#  Normal formatted uptime
  - platform: template
    name: "Formatted Uptime"
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int days = dur / 86400;
      int hours = (dur % 86400) / 3600;
      int minutes = (dur % 3600) / 60;
      int seconds = dur % 60;
      char buffer[50];
      if (days > 0) {
        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
      } else if (hours > 0) {
        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
      } else if (minutes > 0) {
        sprintf(buffer, "%02dm %02ds", minutes, seconds);
      } else {
        sprintf(buffer, "%02ds", seconds);
      }
      return {buffer};
    update_interval: 60s

#  Roode formatted uptime
#  - platform: template
#    name: "Formatted Uptime"
#    lambda: |-
#      uint32_t dur = id(uptime_sensor).state;
#      int days = dur / 86400;
#      int hours = (dur % 86400) / 3600;
#      int minutes = (dur % 3600) / 60;
#      int seconds = dur % 60;
#      char buffer[50];
#      if (days > 0) {
#        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
#      } else if (hours > 0) {
#        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
#      } else if (minutes > 0) {
#        sprintf(buffer, "%02dm %02ds", minutes, seconds);
#      } else {
#        sprintf(buffer, "%02ds", seconds);
#      }
#      return {buffer};
#    update_interval: 60s

#  - platform: roode
#    version:
#      name: $friendly_name version
#  - platform: roode
#    entry_exit_event:
#      name: $friendly_name last direction
#  - platform: template
#    name: $friendly_name Uptime Human Readable
#    id: uptime_human
#    icon: mdi:clock-start


select:
  - platform: ld2410
    distance_resolution:
      name: "Distance Resolution"
    baud_rate:
      name: "Baud Rate"
    light_function:
      name: Light Function
    out_pin_level:
      name: Out Pin Level


#light:
#  - platform: status_led
#    name: sys_status
#    pin: 
#      number: GPIO8
#      inverted: True
#    internal: True
#    restore_mode: ALWAYS_OFF


# Web Server for configuration interface
web_server:
  port: 80


  # Enable built-in web interface features
#  include_internal: true
#  css_include: "web_includes/style.css"
#  js_include: "web_includes/script.js"

  # Pages for configuration interface
#  pages:
#    - id: root
#      title: "GOPES Configuration"
#      content: !lambda |-
#        return "Welcome to GOPES Configuration Interface";
#    - id: settings
#      title: "Sensor Settings"
#      content: !lambda |-
#        return "Configure sensor parameters here";