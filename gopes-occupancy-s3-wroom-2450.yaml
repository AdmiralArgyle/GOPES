esphome:
  name: gopes-occupancy-s3-wroom-2450
  friendly_name: GOPES Occupancy S3 Wroom 2450

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: latest
#    type: esp-idf

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

# Enable Home Assistant API
api:
  encryption:
    key: "9SlCtSaSElgjkO8oJQcxS0BD+26IFPaER2XAn/gcf7M="

ota:
  - platform: esphome
  # Uncomment the following lines to use the OTA binaries compiled for the main project (don't use it if you have modified this yaml file)
  #- platform: http_request
  #  id: ota_http_request

#http_request:

#update:
#  - platform: http_request
#    name: Firmware Update
#    update_interval: 30min
#    source: https://raw.githubusercontent.com/fixtse/esp-ota/refs/heads/main/ota/ultimate-esphome-sensor_manifest.yml

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gopes-Occupancy-S3-Wroom-2450"
    password: !secret fallback_ap_password

# Web server (optional, consider disabling in production)
#web_server:
#  port: 80

captive_portal:

# Configuration entry
#esp32_ble_tracker:
#  scan_parameters:
#    active: true
#    interval: 211ms
#    window:   120ms

#bluetooth_proxy:
#  active: true


external_components:
  - source:
      type: git
      url: https://github.com/hareeshmu/esphome
      ref: ld2450
    components: [ ld2450 ]

uart:
  id: uart_bus
  rx_pin:
    number: GPIO3
    mode:
      input: true
      pullup: true
  tx_pin:
    number: GPIO1
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8

ld2450:
  id: ld2450_radar
  uart_id: uart_bus
  throttle: 1000ms

binary_sensor:
  - platform: ld2450
    ld2450_id: ld2450_radar
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
  - platform: template
    name: "Zone-1 Presence"
    id: zone_1_presence
    device_class: motion
  - platform: template
    name: "Zone-2 Presence"
    id: zone_2_presence
    device_class: motion
  - platform: template
    name: "Zone-3 Presence"
    id: zone_3_presence
    device_class: motion

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "Reboot Sensor"

number:
  - platform: ld2450
    ld2450_id: ld2450_radar
    presence_timeout:
      name: "Timeout"
    zone_1:
      x1:
        name: Zone-1 X1
      y1:
        name: Zone-1 Y1
      x2:
        name: Zone-1 X2
      y2:
        name: Zone-1 Y2
    zone_2:
      x1:
        name: Zone-2 X1
      y1:
        name: Zone-2 Y1
      x2:
        name: Zone-2 X2
      y2:
        name: Zone-2 Y2
    zone_3:
      x1:
        name: Zone-3 X1
      y1:
        name: Zone-3 Y1
      x2:
        name: Zone-3 X2
      y2:
        name: Zone-3 Y2
  - platform: template
    name: "Illuminance OffSet"
    id: illuminance_offset
    unit_of_measurement: "lx"
    min_value: -0
    max_value: 100
    step: 0.1
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    on_value:
      - then:
          - lambda: |-
              id(illuminance_sensor).update();
  - platform: template
    name: "Temperature OffSet"
    id: temperature_offset
    unit_of_measurement: "ºC"
    min_value: -50
    max_value: 0
    step: 0.1
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
  - platform: template
    name: "Humidity OffSet"
    id: humidity_offset
    unit_of_measurement: "%"
    min_value: 0
    max_value: 50
    step: 0.1
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
  - platform: template
    name: "Pressure OffSet"
    id: pressure_offset
    unit_of_measurement: "hPa"
    min_value: -50
    max_value: 0
    step: 0.01
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0

output:
  - platform: ledc
    pin:
      number: GPIO2
      mode: OUTPUT
    id: notif_gpio

light:
  - platform: monochromatic
    name: "On Board LED"
    output: notif_gpio
    id: notif_light
    default_transition_length: 0.3s
    restore_mode: ALWAYS_OFF

switch:
  - platform: ld2450
    ld2450_id: ld2450_radar
    bluetooth:
      name: "Bluetooth"
    multi_target:
      name: "Multi Target Tracking"

select:
  - platform: ld2450
    ld2450_id: ld2450_radar
    baud_rate:
      name: "Baud rate"
    zone_type:
      name: "Zone Type"

text_sensor:
  - platform: ld2450
    ld2450_id: ld2450_radar
    version:
      name: "LD2450 Firmware"
    mac_address:
      name: "LD2450 BT MAC"
    target_1:
      direction:
        name: "Target-1 Direction"
    target_2:
      direction:
        name: "Target-2 Direction"
    target_3:
      direction:
        name: "Target-3 Direction"

# I2C Configuration for BME680 and BH1750
# Using recommended GPIO pins for XIAO ESP32-S3
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

sensor:
  - platform: bh1750
    name: Illuminance
    id: illuminance_sensor    
    address: 0x23
    update_interval: 30s
    filters:
      - lambda: |-
          return x + id(illuminance_offset).state;
  - platform: bme280_i2c
    id: bme280_sensor
    address: 0x76
    update_interval: 30s
    temperature:
      name: "BME280 Temperature"
      id: bme280_temperature_sensor
      oversampling: 2x
      filters:
        - lambda: |-
            return x + id(temperature_offset).state;
    pressure:
      name: "BME280 Pressure"
      id: bme280_pressure_sensor
      filters:
        - lambda: |-
            return x + id(pressure_offset).state;
    humidity:
      name: "BME280 Humidity"
      id: bme280_humidity_sensor
      filters:
        - lambda: |-
            return x + id(humidity_offset).state;
  - platform: ld2450
    ld2450_id: ld2450_radar
    target_count:
      name: Presence Target Count
    still_target_count:
      name: Still Target Count
    moving_target_count:
      name: Moving Target Count
    target_1:
      x:
        name: Target-1 X
      y:
        name: Target-1 Y
      speed:
        name: Target-1 Speed
      angle:
        name: Target-1 Angle
      distance:
        name: Target-1 Distance
      resolution:
        name: Target-1 Resolution
    target_2:
      x:
        name: Target-2 X
      y:
        name: Target-2 Y
      speed:
        name: Target-2 Speed
      angle:
        name: Target-2 Angle
      distance:
        name: Target-2 Distance
      resolution:
        name: Target-2 Resolution
    target_3:
      x:
        name: Target-3 X
      y:
        name: Target-3 Y
      speed:
        name: Target-3 Speed
      angle:
        name: Target-3 Angle
      distance:
        name: Target-3 Distance
      resolution:
        name: Target-3 Resolution
    zone_1:
      target_count:
        name: Zone-1 All Target Count
        id: zone_1_count
        on_value:
          - then:
              - binary_sensor.template.publish:
                  id: zone_1_presence
                  state: !lambda 'return id(zone_1_count).state > 0;'
      still_target_count:
        name: Zone-1 Still Target Count
      moving_target_count:
        name: Zone-1 Moving Target Count
    zone_2:
      target_count:
        name: Zone-2 All Target Count
        id: zone_2_count
        on_value:
          - then:
              - binary_sensor.template.publish:
                  id: zone_2_presence
                  state: !lambda 'return id(zone_2_count).state > 0;'
      still_target_count:
        name: Zone-2 Still Target Count
      moving_target_count:
        name: Zone-2 Moving Target Count
    zone_3:
      target_count:
        name: Zone-3 All Target Count
        id: zone_3_count
        on_value:
          - then:
              - binary_sensor.template.publish:
                  id: zone_3_presence
                  state: !lambda 'return id(zone_3_count).state > 0;'
      still_target_count:
        name: Zone-3 Still Target Count
      moving_target_count:
        name: Zone-3 Moving Target Count

  # --- New Template Sensors for Altitude and Dew Point ---
  - platform: template
    name: "Altitude"
    id: altitude_sensor
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25;
      // Calculate altitude (in meters) based on temperature (°C) and pressure (hPa)
      return ((id(bme280_temperature_sensor).state + 273.15) / 0.0065) *
             (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure_sensor).state), 0.190234) - 1);
    update_interval: 30s
    unit_of_measurement: "m"
    icon: "mdi:signal"

  - platform: template
    name: "Dew Point"
    id: dew_point_sensor
    lambda: |-
      // Calculate dew point (in °C) using temperature (°C) and relative humidity (%)
      float temp = id(bme280_temperature_sensor).state;
      float hum = id(bme280_humidity_sensor).state;
      float a = 17.67;
      float b = 243.5;
      float gamma = log(hum / 100.0) + (a * temp) / (b + temp);
      return (b * gamma) / (a - gamma);
    update_interval: 30s
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-alert"


