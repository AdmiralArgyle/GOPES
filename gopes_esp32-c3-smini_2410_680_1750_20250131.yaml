substitutions:
  name: gopes-occupancy-2
  friendly_name: "GOPES Occupancy 2"

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino
    version: latest

logger:
  level: DEBUG
  baud_rate: 115200

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  on_boot:
    priority: 600
    then:
      - lambda: |-
          Wire.begin();
          delay(100);

# Enable Home Assistant API
api:
  encryption:
    key: "YYHFB9aF+QnoYoz0NAckpiMnRVpKRdjy+8OkrLpMixc="

ota:
  platform: esphome

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot
  ap:
    ssid: "${friendly_name}"
    password: !secret fallback_ap_password
    
web_server:
  port: 80

captive_portal:

# I2C Configuration for BME680
# Using recommended GPIO pins for ESP32-C3 Super Mini
i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true
  frequency: 400kHz  # Added optimal frequency for BME680

# UART Configuration for LD2410
# Using recommended GPIO pins for ESP32-C3 Super Mini
uart:
  id: ld2410_uart
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

# LD2410 Configuration
ld2410:
  id: ld2410_radar


# User configurable offsets
number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    optimistic: true
    min_value: -10
    max_value: 10
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"
    
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    optimistic: true
    min_value: -20
    max_value: 20
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"

  - platform: ld2410
    timeout:
      name: Radar Timeout
    max_move_distance_gate:
      name: Radar Max Move Distance
    max_still_distance_gate:
      name: Radar Max Still Distance
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

# Setting start of zone 1 occupancy
  - platform: template
    name: "Radar Zone 1 Start"
    id: radar_z1_start
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 1 occupancy
  - platform: template
    name: "Radar End Zone 1"
    id: radar_z1_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 50
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 2 occupancy
  - platform: template
    name: "Radar End Zone 2"
    id: radar_z2_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 150
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  # Setting ending of zone 3 occupancy
  - platform: template
    name: "Radar End Zone 3"
    id: radar_z3_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 250
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"

  - platform: template
    name: "Light Level Offset"
    id: light_level_offset
    optimistic: true
    min_value: -1000
    max_value: 1000
    step: 1
    restore_value: true
    initial_value: 0
    entity_category: "config"
    unit_of_measurement: "lx"


# BME680 configuration using BSEC2
bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x77
  state_save_interval: 6h
  
sensor:
  # BME680 Sensors using BSEC2
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    temperature:
      name: "Temperature"
      id: raw_temperature
      internal: true
    pressure:
      name: "Pressure"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    humidity:
      name: "Humidity"
      id: raw_humidity
      internal: true
    gas_resistance:
      name: "Gas Resistance"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    iaq:
      name: "IAQ"
      id: iaq
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    co2_equivalent:
      name: "CO2 Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3

  # Compensated temperature sensor
  - platform: template
    name: "Temperature Compensated"
    id: compensated_temperature
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_temperature).state + id(temperature_offset).state;
    update_interval: 60s

  # Compensated humidity sensor
  - platform: template
    name: "Humidity Compensated"
    id: compensated_humidity
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_humidity).state + id(humidity_offset).state;
    update_interval: 60s

  - platform: ld2410
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance

  - platform: ld2410
    moving_distance:
      name: Radar Moving Distance
      id: moving_distance
    still_distance:
      name: Radar Still Distance
      id: still_distance
    moving_energy:
      name: Radar Move Energy
      id: radar_moving_energy
    still_energy:
      name: Radar Still Energy
      id: radar_still_energy
    detection_distance:
      name: Radar Detection Distance
      id: radar_detection_distance
    g0:
      move_energy:
        name: g0 move energy
        state_class: measurement
      still_energy:
        name: g0 still energy
        state_class: measurement
    g1:
      move_energy:
        name: g1 move energy
        state_class: measurement
      still_energy:
        name: g1 still energy
        state_class: measurement
    g2:
      move_energy:
        name: g2 move energy
        state_class: measurement
      still_energy:
        name: g2 still energy
        state_class: measurement
    g3:
      move_energy:
        name: g3 move energy
        state_class: measurement
      still_energy:
        name: g3 still energy
        state_class: measurement
    g4:
      move_energy:
        name: g4 move energy
        state_class: measurement
      still_energy:
        name: g4 still energy
        state_class: measurement
    g5:
      move_energy:
        name: g5 move energy
        state_class: measurement
      still_energy:
        name: g5 still energy
        state_class: measurement
    g6:
      move_energy:
        name: g6 move energy
        state_class: measurement
      still_energy:
        name: g6 still energy
        state_class: measurement
    g7:
      move_energy:
        name: g7 move energy
        state_class: measurement
      still_energy:
        name: g7 still energy
        state_class: measurement
    g8:
      move_energy:
        name: g8 move energy
        state_class: measurement
      still_energy:
        name: g8 still energy
        state_class: measurement

  - platform: bh1750
    name: "Light Level"
    id: raw_light_level
    address: 0x23  # Can be 0x23 or 0x5C depending on ADDR pin
    update_interval: 60s
#    resolution: 1.0  # Can be 0.5 or 1.0
#    measurement_duration: 120ms  # Options: 120ms, 120ms, or 11ms
    internal: true  # Hide raw value since we'll use the compensated value
    
  # Compensated light level sensor
  - platform: template
    name: "Light Level Compensated"
    id: compensated_light_level
    unit_of_measurement: "lx"
    device_class: "illuminance"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_light_level).state + id(light_level_offset).state;
    update_interval: 60s

  - platform: uptime
    id: uptime_sensor
    internal: true
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: ld2410
    has_target:
      name: Radar Target
      id: radar_has_target
    has_moving_target:
      name: Radar Moving Target
      id: radar_has_moving_target
    has_still_target:
      name: Radar Still Target
      id: radar_has_still_target
  ## Set Up Radar Zones Based On Distance
  - platform: template
    name: "Radar Zone 1 Occupancy"
    id: radar_zone_1_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_detection_distance).state < id(radar_z1_end).state) && (id(radar_detection_distance).state > id(radar_z1_start).state))){
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 2 Occupancy"
    id: radar_zone_2_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z1_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z2_end).state))) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 3 Occupancy"
    id: radar_zone_3_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z2_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z3_end).state))) {
        return true;
      } else {
        return false;
      }


# Informational sensors
text_sensor:
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    name: "IAQ Classification"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

  - platform: template
    name: "Formatted Uptime"
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int days = dur / 86400;
      int hours = (dur % 86400) / 3600;
      int minutes = (dur % 3600) / 60;
      int seconds = dur % 60;
      char buffer[50];
      if (days > 0) {
        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
      } else if (hours > 0) {
        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
      } else if (minutes > 0) {
        sprintf(buffer, "%02dm %02ds", minutes, seconds);
      } else {
        sprintf(buffer, "%02ds", seconds);
      }
      return {buffer};
    update_interval: 60s

  - platform: ld2410
    version:
      name: "Radar Firmware Version"
    mac_address:
      name: "LD2410 BT MAC"

debug:
  update_interval: 30s

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: reboot_esp

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: ld2410
    factory_reset:
      name: "Factory Reset Radar"
    restart:
      name: "Restart Radar"
    query_params:
      name: query params

switch:
  - platform: ld2410
    bluetooth:
      name: "ld2410 Bluetooth"
      id: radar_bluetooth
    engineering_mode:
      name: "Radar Engineering Mode"
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

select:
  - platform: ld2410
    distance_resolution:
      name: "ld2410 Gate Size"
      disabled_by_default: true

