####################################
# Start Substitutions
####################################

substitutions:
# Replace name with you sensor name
  name: dungeon-air-quality
  friendly_name: "Dungeon Air Quality"
  comment_text: "Generally Unstable and Poorly Produced Inventions - Air Quality Sensor with PMS5003, BME680, and SCD41."
  project_name: "GUPPI.AQS-5003-680-41"
  project_version: "25.2.17.1"
# **IMPORTANT** - Add API key here for copy/paste convenience
  api_key: "ojKg/+qdPc6f1vW4F60gkMzPCAHya0AKJUFvJdZeo0k="
# Specify below pin numbers for UART, GPIO, and I2C connections
# Delete if not needed
  tx_pin_uart: GPIO17
  rx_pin_uart: GPIO16
  set_pin_gpio: GPIO4
  sda_pin_i2c: GPIO21
  scl_pin_i2c: GPIO22

####################################
# End Substitutions
####################################

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${comment_text}"
  project: 
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: latest

# Enable logging
logger:
  # 0 Enables logging, but disables serial-port logging to free CPU and memory
  baud_rate: 0
  #  Disable DEBUG after testing
#  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "${api_key}"

ota:
  - platform: esphome

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_2_ssid
    password: !secret wifi_2_password
  - ssid: !secret wifi_3_ssid
    password: !secret wifi_3_password
  output_power: 8.5dB

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name}"
    password: !secret fallback_ap_password

# Web server (optional, consider disabling in production)
#web_server:
#  port: 80

captive_portal:

# I²C bus (for BME680 and SCD41)
i2c:
  sda: "${sda_pin_i2c}"
  scl: "${scl_pin_i2c}"
  scan: true
  frequency: 400kHz  # Optimal frequency for BME680

# UART bus (for PMS5003)
uart:
  id: uart_bus
  tx_pin: 
    number: "${tx_pin_uart}"  # Connect PMS5003 TX to ESP32 RX
#    mode:
#      input: true
#      pullup: true
  rx_pin: 
    number: "${rx_pin_uart}"   # (TX not used by PMS5003)
#    mode:
#      input: true
#      pullup: true
  baud_rate: 9600
#  parity: NONE
#  stop_bits: 1
#  data_bits: 8

################################################################################
# Globals
################################################################################
time:
  - platform: homeassistant
    id: home_time

globals:
  - id: last_measurement_time
    type: long
    restore_value: yes
    initial_value: '0'

################################################################################
# Number Components for Adjustable Offsets (replacing globals)
################################################################################
number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    unit_of_measurement: "ºC"
    min_value: -50.0
    max_value: 0.0
    step: 0.1
    mode: box
    optimistic: true
    restore_value: true
    initial_value: 0.0
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    unit_of_measurement: "%"
    min_value: 0.0
    max_value: 50.0
    step: 0.1
    mode: box
    optimistic: true
    restore_value: true
    initial_value: 0.0

################################################################################
# PMS5003 Particulate Measurements via PMSX003 Library
# BME680 configuration using BSEC2
# Ensure that the sensor is properly wired and powered (3.3V)
################################################################################

bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x77  # Verify this address with your hardware (common alternatives: 0x76)
  state_save_interval: 6h


sensor:
  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "PM1.0 Concentration"
      unit_of_measurement: "µg/m³"
      id: pms_pm1
      filters:
        - lambda: |-
            if (!id(pms_set).state) {
              // Sensor is off; return "{}" to preserve last value.
              return {}; // Do not update state
            }
            // Optionally, check if time is valid before updating.
            if (id(home_time).now().is_valid()) {
              id(last_measurement_time) = id(home_time).now().timestamp;
            }
            return x;
    pm_2_5:
      name: "PM2.5 Concentration"
      unit_of_measurement: "µg/m³"
      id: pms_pm25
      filters:
        - lambda: |-
            if (!id(pms_set).state) {
              // Sensor is off; return "{}" to preserve last value.
              return {}; // Do not update state
            }
            // Optionally, check if time is valid before updating.
            if (id(home_time).now().is_valid()) {
              id(last_measurement_time) = id(home_time).now().timestamp;
            }
            return x;
    pm_10_0:
      name: "PM10 Concentration"
      unit_of_measurement: "µg/m³"
      id: pms_pm10
      filters:
        - lambda: |-
            if (!id(pms_set).state) {
              // Sensor is off; return "{}" to preserve last value.
              return {}; // Do not update state
            }
            // Optionally, check if time is valid before updating.
            if (id(home_time).now().is_valid()) {
              id(last_measurement_time) = id(home_time).now().timestamp;
            }
            return x;
    update_interval: 30s
#    update_interval: 120s

  - platform: template
    name: "PM Sensor Data Age"
    unit_of_measurement: "s"
    lambda: |-
      if (id(last_measurement_time) == 0) {
        return {}; // Do not update state
      }
      return id(home_time).now().timestamp - id(last_measurement_time);
    update_interval: 1s

  # New Derived Sensor: Air Quality Index (PM2.5 based)
  - platform: template
    name: "Air Quality Index (PM2.5)"
    unit_of_measurement: "AQI"
    id: aqi_pm25
    lambda: |-
      // Retrieve the PM2.5 concentration (µg/m³) from the PMS5003 sensor.
      float C = id(pms_pm25).state;
      // If PM2.5 data is not valid, do not update the AQI sensor state.
      if (isnan(C))
        return {};  // Retain the last valid value.
        
      float I = NAN;
      // Calculate AQI based on EPA breakpoints.
      if (C <= 12.0) {
        // Good (AQI 0-50)
        I = (50.0 / 12.0) * C;
      } else if (C <= 35.4) {
        // Moderate (AQI 51-100)
        I = ((100.0 - 51.0) / (35.4 - 12.1)) * (C - 12.1) + 51.0;
      } else if (C <= 55.4) {
        // Unhealthy for Sensitive Groups (AQI 101-150)
        I = ((150.0 - 101.0) / (55.4 - 35.5)) * (C - 35.5) + 101.0;
      } else if (C <= 150.4) {
        // Unhealthy (AQI 151-200)
        I = ((200.0 - 151.0) / (150.4 - 55.5)) * (C - 55.5) + 151.0;
      } else if (C <= 250.4) {
        // Very Unhealthy (AQI 201-300)
        I = ((300.0 - 201.0) / (250.4 - 150.5)) * (C - 150.5) + 201.0;
      } else if (C <= 500.4) {
        // Hazardous (AQI 301-500)
        I = ((500.0 - 301.0) / (500.4 - 250.5)) * (C - 250.5) + 301.0;
      } else {
        I = 500.0;
      }
      return I;
    update_interval: 30s

  # BME680 Readings Using BSEC2 (with offset adjustments)
  - platform: bme68x_bsec2
    temperature:
      name: "BME680 Temperature"
      unit_of_measurement: "°C"
      id: batt_box_temperature
      filters:
        - lambda: |-
            // Apply the adjustable temperature offset
            return x + id(temperature_offset).state;
    pressure:
      name: "BME680 Pressure"
      unit_of_measurement: "hPa"
      id: batt_box_pressure
      filters:
        - median
    humidity:
      name: "BME680 Humidity"
      unit_of_measurement: "%"
      id: batt_box_humidity
      filters:
        - lambda: |-
            // Apply the adjustable humidity offset
            return x + id(humidity_offset).state;
    iaq:
      name: "BME680 IAQ"
      id: bme680_iaq
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
      unit_of_measurement: "ppm"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"
      unit_of_measurement: "ppm"

  # SCD41 Sensor Readings
  - platform: scd4x
    co2:
      name: "SCD41 CO2"
      unit_of_measurement: "ppm"
    temperature:
      name: "SCD41 Temperature"
      unit_of_measurement: "°C"
    humidity:
      name: "SCD41 Humidity"
      unit_of_measurement: "%"

  # Derived Sensor: Dew Point (using the Magnus formula)
  - platform: template
    name: "Dew Point"
    unit_of_measurement: "°C"
    id: dew_point
    lambda: |-
      float T = id(batt_box_temperature).state;
      float RH = id(batt_box_humidity).state;
      if (isnan(T) || isnan(RH))
        return {};  // Retain the last valid value.
      const float a = 17.27;
      const float b = 237.7;
      float alpha = log(RH / 100.0) + (a * T) / (b + T);
      return (b * alpha) / (a - alpha);
    update_interval: 60s

  # Derived Sensor: Altitude (assuming sea-level pressure = 1013.25 hPa)
  - platform: template
    name: "Altitude"
    unit_of_measurement: "m"
    id: altitude
    lambda: |-
      float p = id(batt_box_pressure).state;
      if (isnan(p))
        return {};  // Retain the last valid value.
      return 44330.0 * (1 - pow(p / 1013.25, 1.0 / 5.255));
    update_interval: 60s

  # Standard Diagnostic Sensors
  - platform: uptime
    name: "Device Uptime"
    id: sys_uptime
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

################################################################################
# Text Sensors for Diagnostics and Derived Information
################################################################################
text_sensor:
  # IAQ Classification based on the IAQ index
  - platform: template
    name: "IAQ Classification"
    lambda: |-
      int iaq = int(id(bme680_iaq).state);
      if (iaq <= 50)
        return {"Excellent"};
      else if (iaq <= 100)
        return {"Good"};
      else if (iaq <= 150)
        return {"Lightly Polluted"};
      else if (iaq <= 200)
        return {"Moderately Polluted"};
      else if (iaq <= 250)
        return {"Heavily Polluted"};
      else if (iaq <= 350)
        return {"Severely Polluted"};
      else
        return {"Extremely Polluted"};
  # Device IP Address
  - platform: wifi_info
    ip_address:
      name: "Device IP Address"
  # Firmware Version (optional)
  - platform: version
    name: "Firmware Version"

################################################################################
# Binary Sensor for Overall Sensor Health
################################################################################
binary_sensor:
  - platform: template
    name: "Air Quality Sensor Healthy"
    lambda: |-
      if (!isnan(id(batt_box_temperature).state) &&
          !isnan(id(batt_box_humidity).state) &&
          !isnan(id(batt_box_pressure).state))
        return true;
      return false;
    device_class: connectivity

################################################################################
# Button Component to Restart the Device
################################################################################
button:
  - platform: restart
    icon: mdi:power-cycle
    name: "Reboot Sensor"

################################################################################
# Switch component to start PMS5003 Measurement
################################################################################
switch:
  - platform: gpio
    pin: 
      number: "${set_pin_gpio}"
    id: pms_set
    name: "Start measuring"
    restore_mode: ALWAYS_ON


################################################################################
# Interval component to toggle PMS5003 Measurement
################################################################################
interval:
  - interval: 120s
    then:
      - switch.turn_on: pms_set
      - delay: 60s
      - switch.turn_off: pms_set
