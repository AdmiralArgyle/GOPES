# GOPES (GUPPI Occupancy and Presence Enhancement System)
# Using uncle-yura/esphome-ld2450 and Roode VL53L1X

substitutions:
  name: gopes-occupancy
  friendly_name: "GOPES Occupancy"

# esp32:
#   board: esp32-c3-devkitm-1
#   variant: esp32c3
#   framework:
#     type: arduino
#     version: latest

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    version: latest

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

# esphome:
#   name: "${name}"
#   friendly_name: "${friendly_name}"
#   platformio_options:
#    board_build.flash_mode: dio
#    platform_version: latest

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  platformio_options:
    board_build.mcu: esp32c3
    board_build.variant: esp32c3
    platform: espressif32
    board: esp32-c3-devkitm-1

# Enable Home Assistant API
api:
  encryption:
    key: "Fg6xZOM8Lgc2SjgvqBF6mi88ZnrhXG9HAlExLlLRhpk="

ota:
  - platform: esphome

# WiFi configuration with status handlers
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  
  # Enable fallback hotspot
  ap:
    ssid: "${friendly_name}"
    password: !secret fallback_ap_password
    
web_server:
  port: 80

esp32_ble_tracker:
  scan_parameters:
    interval: 1000ms
    window: 1000ms
    active: true

bluetooth_proxy:
  active: true
#  cache_services: false

captive_portal:

i2c:
  sda: GPIO8
  scl: GPIO9
#  sda: GPIO6
#  scl: GPIO7
  scan: true

# Configure UART for LD2410
uart:
  id: uart_radar
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

# User configurable offsets
number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset
    optimistic: true
    min_value: -10
    max_value: 10
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"
    
  - platform: template
    name: "Humidity Offset"
    id: humidity_offset
    optimistic: true
    min_value: -20
    max_value: 20
    step: 0.1
    restore_value: true
    initial_value: 0
    entity_category: "config"


# BME68x configuration using BSEC2
bme68x_bsec2_i2c:
  id: bme68x_sensor
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  address: 0x77
  state_save_interval: 6h

sensor:
  # BME68x Sensors using BSEC2
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    temperature:
      name: "Temperature"
      id: raw_temperature
      internal: true
    pressure:
      name: "Pressure"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    humidity:
      name: "Humidity"
      id: raw_humidity
      internal: true
    gas_resistance:
      name: "Gas Resistance"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    iaq:
      name: "IAQ"
      id: iaq
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    co2_equivalent:
      name: "CO2 Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 3

  # Compensated temperature sensor
  - platform: template
    name: "Temperature Compensated"
    id: compensated_temperature
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_temperature).state + id(temperature_offset).state;
    update_interval: 60s

  # Compensated humidity sensor
  - platform: template
    name: "Humidity Compensated"
    id: compensated_humidity
    unit_of_measurement: "%"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      return id(raw_humidity).state + id(humidity_offset).state;
    update_interval: 60s

  - platform: uptime
    id: uptime_sensor
    internal: true
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

text_sensor:
  - platform: bme68x_bsec2
    bme68x_bsec2_id: bme68x_sensor
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    name: "IAQ Classification"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

  - platform: template
    name: "Formatted Uptime"
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int days = dur / 86400;
      int hours = (dur % 86400) / 3600;
      int minutes = (dur % 3600) / 60;
      int seconds = dur % 60;
      char buffer[50];
      if (days > 0) {
        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
      } else if (hours > 0) {
        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
      } else if (minutes > 0) {
        sprintf(buffer, "%02dm %02ds", minutes, seconds);
      } else {
        sprintf(buffer, "%02ds", seconds);
      }
      return {buffer};
    update_interval: 60s

debug:
  update_interval: 30s

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: reboot_esp